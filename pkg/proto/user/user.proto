// Copyright Â© 2023 OpenIM. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package OpenIMServer.user;
import "sdkws/sdkws.proto";
import "conversation/conversation.proto";
option go_package = "github.com/OpenIMSDK/Open-IM-Server/pkg/proto/user";

message getAllUserIDReq{
  sdkws.RequestPagination pagination = 1;
}
message getAllUserIDResp{
  int32 total = 1;
  repeated string userIDs = 2;
}


message accountCheckReq{
  repeated string checkUserIDs = 1;
}
message accountCheckResp{
  message singleUserStatus {
    string userID = 1;
    string accountStatus = 2;
  }
  repeated singleUserStatus results = 1;
}


message getDesignateUsersReq{
  repeated string userIDs = 1;
}
message getDesignateUsersResp{
  repeated sdkws.UserInfo usersInfo = 1;
}

message updateUserInfoReq{
  sdkws.UserInfo userInfo = 1;
}
message updateUserInfoResp{
}

message setGlobalRecvMessageOptReq{
  string userID = 1;
 int32 globalRecvMsgOpt = 3;
}
message setGlobalRecvMessageOptResp{
}

message setConversationReq{
  OpenIMServer.conversation.Conversation conversation = 1;
  int32 notificationType = 2;
  string operationID = 3;
}

message setConversationResp{

}

message setRecvMsgOptReq {
  string ownerUserID = 1;
  string conversationID = 2;
  int32 recvMsgOpt = 3;
  int32 notificationType = 4;
  string operationID = 5;
}

message setRecvMsgOptResp {

}

message getConversationReq{
  string conversationID = 1;
  string ownerUserID = 2;
  string operationID = 3;
}

message getConversationResp{
  OpenIMServer.conversation.Conversation conversation = 2;
}

message getConversationsReq{
  string ownerUserID = 1;
  repeated string conversationIDs = 2;
  string operationID = 3;
}

message getConversationsResp{
  repeated OpenIMServer.conversation.Conversation conversations = 2;
}

message getAllConversationsReq{
  string ownerUserID = 1;
  string operationID = 2;
}

message getAllConversationsResp{
  repeated OpenIMServer.conversation.Conversation conversations = 2;
}

message batchSetConversationsReq{
  repeated OpenIMServer.conversation.Conversation conversations = 1;
  string OwnerUserID = 2;
  int32 notificationType = 3;
  string OperationID = 4;
}

message batchSetConversationsResp{
  repeated string Success = 2;
  repeated string Failed = 3;
}


message getPaginationUsersReq {
  sdkws.RequestPagination pagination = 2;
}

message getPaginationUsersResp{
  int32 total = 1;
  repeated sdkws.UserInfo users = 2;
}

message userRegisterReq {
  string secret = 1;
  repeated sdkws.UserInfo users = 2;
}
message userRegisterResp {
}


message getGlobalRecvMessageOptReq{
  string userID = 1;
}

message getGlobalRecvMessageOptResp{
  int32 globalRecvMsgOpt = 1;
}

message userRegisterCountReq {
  int64 start = 1;
  int64 end = 2;
}

message userRegisterCountResp {
  int64 total = 1;
  int64 before = 2;
  map<string, int64> count = 3;
}

message subscribeOrCancelUsersStatusReq{
  repeated string userIDs = 1;
  int32 type = 2;
}
message subscribeOrCancelUsersStatusResp{
  map<string, int64> status = 1;
}


service user {
  //Get the specified user information full field
  rpc getDesignateUsers(getDesignateUsersReq) returns(getDesignateUsersResp);
  //update user information
  rpc updateUserInfo(updateUserInfoReq) returns(updateUserInfoResp);
  //Set user message receiving options
  rpc setGlobalRecvMessageOpt(setGlobalRecvMessageOptReq) returns(setGlobalRecvMessageOptResp);
  //Get the user message receiving option If not found, no error will be returned
  rpc getGlobalRecvMessageOpt(getGlobalRecvMessageOptReq) returns(getGlobalRecvMessageOptResp);
  //Check if userID exists
  rpc accountCheck(accountCheckReq) returns (accountCheckResp);
  //Turn the page (or specify userID, nickname) to pull user information Full field
  rpc getPaginationUsers(getPaginationUsersReq) returns (getPaginationUsersResp);
  //user registration
  rpc userRegister(userRegisterReq) returns (userRegisterResp);
  //Get all user IDs
  rpc getAllUserID(getAllUserIDReq) returns (getAllUserIDResp);
  //Get the total number of users and the user increment within a specified time period
  rpc userRegisterCount(userRegisterCountReq)returns(userRegisterCountResp);
  //Subscribe or unsubscribe user presence
  rpc subscribeOrCancelUsersStatus(subscribeOrCancelUsersStatusReq)returns(subscribeOrCancelUsersStatusResp);
}

