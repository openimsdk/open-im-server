# Copyright © 2023 OpenIM. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# Source: openim-api/templates/app-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: openim-cm
data:
  config.yaml: |+
  notification.yaml: |+
---
# Source: openim-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-api
  labels:
    helm.sh/chart: openim-api-0.1.0
    app.kubernetes.io/name: openim-api
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openim-api
    app.kubernetes.io/instance: release-name
---
# Source: openim-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-api
  labels:
    helm.sh/chart: openim-api-0.1.0
    app.kubernetes.io/name: openim-api
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-api
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-api
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-api
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-api/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-api
  labels:
    helm.sh/chart: openim-api-0.1.0
    app.kubernetes.io/name: openim-api
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-api
                port:
                  number: 80
---
# Source: openim-msggateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-msggateway
  labels:
    helm.sh/chart: openim-msggateway-0.1.0
    app.kubernetes.io/name: openim-msggateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 88
      targetPort: rpc
      protocol: TCP
      name: rpc
  selector:
    app.kubernetes.io/name: openim-msggateway
    app.kubernetes.io/instance: release-name
---
# Source: openim-msggateway/templates/deployment.yaml
# Copyright © 2023 OpenIM. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-msggateway
  labels:
    helm.sh/chart: openim-msggateway-0.1.0
    app.kubernetes.io/name: openim-msggateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-msggateway
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-msggateway
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-msggateway
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: rpc
              containerPort: 88
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-msggateway/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-msggateway
  labels:
    helm.sh/chart: openim-msggateway-0.1.0
    app.kubernetes.io/name: openim-msggateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-msggateway
                port:
                  number: 80
---
# Source: openim-msgtransfer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-msgtransfer
  labels:
    helm.sh/chart: openim-msgtransfer-0.1.0
    app.kubernetes.io/name: openim-msgtransfer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openim-msgtransfer
    app.kubernetes.io/instance: release-name
---
# Source: openim-msgtransfer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-msgtransfer
  labels:
    helm.sh/chart: openim-msgtransfer-0.1.0
    app.kubernetes.io/name: openim-msgtransfer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-msgtransfer
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-msgtransfer
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-msgtransfer
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-msgtransfer/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-msgtransfer
  labels:
    helm.sh/chart: openim-msgtransfer-0.1.0
    app.kubernetes.io/name: openim-msgtransfer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-msgtransfer
                port:
                  number: 80
---
# Source: openim-push/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-push
  labels:
    helm.sh/chart: openim-push-0.1.0
    app.kubernetes.io/name: openim-push
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openim-push
    app.kubernetes.io/instance: release-name
---
# Source: openim-push/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-push
  labels:
    helm.sh/chart: openim-push-0.1.0
    app.kubernetes.io/name: openim-push
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-push
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-push
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-push
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-push/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-push
  labels:
    helm.sh/chart: openim-push-0.1.0
    app.kubernetes.io/name: openim-push
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-push
                port:
                  number: 80
---
# Source: openim-rpc-auth/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-rpc-auth
  labels:
    helm.sh/chart: openim-rpc-auth-0.1.0
    app.kubernetes.io/name: openim-rpc-auth
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openim-rpc-auth
    app.kubernetes.io/instance: release-name
---
# Source: openim-rpc-auth/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-rpc-auth
  labels:
    helm.sh/chart: openim-rpc-auth-0.1.0
    app.kubernetes.io/name: openim-rpc-auth
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-rpc-auth
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-rpc-auth
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-rpc-auth
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-rpc-auth/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-rpc-auth
  labels:
    helm.sh/chart: openim-rpc-auth-0.1.0
    app.kubernetes.io/name: openim-rpc-auth
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-rpc-auth
                port:
                  number: 80
---
# Source: openim-rpc-conversation/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-rpc-conversation
  labels:
    helm.sh/chart: openim-rpc-conversation-0.1.0
    app.kubernetes.io/name: openim-rpc-conversation
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openim-rpc-conversation
    app.kubernetes.io/instance: release-name
---
# Source: openim-rpc-conversation/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-rpc-conversation
  labels:
    helm.sh/chart: openim-rpc-conversation-0.1.0
    app.kubernetes.io/name: openim-rpc-conversation
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-rpc-conversation
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-rpc-conversation
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-rpc-conversation
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-rpc-conversation/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-rpc-conversation
  labels:
    helm.sh/chart: openim-rpc-conversation-0.1.0
    app.kubernetes.io/name: openim-rpc-conversation
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-rpc-conversation
                port:
                  number: 80
---
# Source: openim-rpc-friend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-rpc-friend
  labels:
    helm.sh/chart: openim-rpc-friend-0.1.0
    app.kubernetes.io/name: openim-rpc-friend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openim-rpc-friend
    app.kubernetes.io/instance: release-name
---
# Source: openim-rpc-friend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-rpc-friend
  labels:
    helm.sh/chart: openim-rpc-friend-0.1.0
    app.kubernetes.io/name: openim-rpc-friend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-rpc-friend
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-rpc-friend
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-rpc-friend
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-rpc-friend/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-rpc-friend
  labels:
    helm.sh/chart: openim-rpc-friend-0.1.0
    app.kubernetes.io/name: openim-rpc-friend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-rpc-friend
                port:
                  number: 80
---
# Source: openim-rpc-group/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-rpc-group
  labels:
    helm.sh/chart: openim-rpc-group-0.1.0
    app.kubernetes.io/name: openim-rpc-group
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openim-rpc-group
    app.kubernetes.io/instance: release-name
---
# Source: openim-rpc-group/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-rpc-group
  labels:
    helm.sh/chart: openim-rpc-group-0.1.0
    app.kubernetes.io/name: openim-rpc-group
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-rpc-group
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-rpc-group
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-rpc-group
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-rpc-group/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-rpc-group
  labels:
    helm.sh/chart: openim-rpc-group-0.1.0
    app.kubernetes.io/name: openim-rpc-group
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-rpc-group
                port:
                  number: 80
---
# Source: openim-rpc-msg/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-rpc-msg
  labels:
    helm.sh/chart: openim-rpc-msg-0.1.0
    app.kubernetes.io/name: openim-rpc-msg
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openim-rpc-msg
    app.kubernetes.io/instance: release-name
---
# Source: openim-rpc-msg/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-rpc-msg
  labels:
    helm.sh/chart: openim-rpc-msg-0.1.0
    app.kubernetes.io/name: openim-rpc-msg
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-rpc-msg
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-rpc-msg
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-rpc-msg
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-rpc-msg/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-rpc-msg
  labels:
    helm.sh/chart: openim-rpc-msg-0.1.0
    app.kubernetes.io/name: openim-rpc-msg
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-rpc-msg
                port:
                  number: 80
---
# Source: openim-rpc-third/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-rpc-third
  labels:
    helm.sh/chart: openim-rpc-third-0.1.0
    app.kubernetes.io/name: openim-rpc-third
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openim-rpc-third
    app.kubernetes.io/instance: release-name
---
# Source: openim-rpc-third/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-rpc-third
  labels:
    helm.sh/chart: openim-rpc-third-0.1.0
    app.kubernetes.io/name: openim-rpc-third
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-rpc-third
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-rpc-third
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-rpc-third
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-rpc-third/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-rpc-third
  labels:
    helm.sh/chart: openim-rpc-third-0.1.0
    app.kubernetes.io/name: openim-rpc-third
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-rpc-third
                port:
                  number: 80
---
# Source: openim-rpc-user/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-openim-rpc-user
  labels:
    helm.sh/chart: openim-rpc-user-0.1.0
    app.kubernetes.io/name: openim-rpc-user
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openim-rpc-user
    app.kubernetes.io/instance: release-name
---
# Source: openim-rpc-user/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-openim-rpc-user
  labels:
    helm.sh/chart: openim-rpc-user-0.1.0
    app.kubernetes.io/name: openim-rpc-user
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openim-rpc-user
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openim-rpc-user
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: openim-rpc-user
          securityContext:
            {}
          image: "registry.cn-hangzhou.aliyuncs.com/openimsdk/openim-api:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /openim/openim-server/config/config.yaml
              name: config
              subPath: config.yaml
            - mountPath: /openim/openim-server/config/
              name: config
              subPath: notification.yaml
      volumes:
        - name: config
          configMap:
            name: openim-cm
---
# Source: openim-rpc-user/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-openim-rpc-user
  labels:
    helm.sh/chart: openim-rpc-user-0.1.0
    app.kubernetes.io/name: openim-rpc-user
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /./templates/helm-image.yaml
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "openim.server.com"
      secretName: webapitls
  rules:
    - host: "openim.server.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-openim-rpc-user
                port:
                  number: 80
